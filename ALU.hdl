/**
 * Larc ALU:
 *   switch( {nor,sub} ) {
 *     case {0,0}: out = a + b            (z set if out == 0)
 *     case {0,1}: out = a - b            (z set if out == 0)
 *     case {1,0}: out = a NOR b          (z set if out == 0)
 *     case {1,1}: out = (a < b ? 1 : 0 ) (z is undefined)
 */
CHIP ALU {

    IN a[16],b[16],      // the two 16-bit inputs to be operated on
       sub,              // 1 if subtraction is the requested operation
       nor;              // 1 if NOR is the requested operation
                         // note that sub == nor == 1 if SLT is requested
    OUT out[16],         // 16-bit output of the requested operation
        z;               // 1 iff out == 0 (zero flag)

    PARTS:
    Not(in=sub, out=Notsub);
    And(a=nor, b=Notsub, out = norAndNotsub);
    And(a=nor, b=sub, out=norAndsub);
    ALU1bit(a= a[0], b=b[0], cin=sub, sub=sub, nor=norAndNotsub, out=out0, cout=carry1);
    ALU1bit(a= a[1], b=b[1], cin=carry1, sub=sub, nor=norAndNotsub, out=out1, cout=carry2);
    ALU1bit(a= a[2], b=b[2], cin=carry2, sub=sub, nor=norAndNotsub, out=out2, cout=carry3);
    ALU1bit(a= a[3], b=b[3], cin=carry3, sub=sub, nor=norAndNotsub, out=out3, cout=carry4);
    ALU1bit(a= a[4], b=b[4], cin=carry4, sub=sub, nor=norAndNotsub, out=out4, cout=carry5);
    ALU1bit(a= a[5], b=b[5], cin=carry5, sub=sub, nor=norAndNotsub, out=out5, cout=carry6);
    ALU1bit(a= a[6], b=b[6], cin=carry6, sub=sub, nor=norAndNotsub, out=out6, cout=carry7);
    ALU1bit(a= a[7], b=b[7], cin=carry7, sub=sub, nor=norAndNotsub, out=out7, cout=carry8);
    ALU1bit(a= a[8], b=b[8], cin=carry8, sub=sub, nor=norAndNotsub, out=out8, cout=carry9);
    ALU1bit(a= a[9], b=b[9], cin=carry9, sub=sub, nor=norAndNotsub, out=out9, cout=carry10);
    ALU1bit(a= a[10], b=b[10], cin=carry10, sub=sub, nor=norAndNotsub, out=out10, cout=carry11);
    ALU1bit(a= a[11], b=b[11], cin=carry11, sub=sub, nor=norAndNotsub, out=out11, cout=carry12);
    ALU1bit(a= a[12], b=b[12], cin=carry12, sub=sub, nor=norAndNotsub, out=out12, cout=carry13);
    ALU1bit(a= a[13], b=b[13], cin=carry13, sub=sub, nor=norAndNotsub, out=out13, cout=carry14);
    ALU1bit(a= a[14], b=b[14], cin=carry14, sub=sub, nor=norAndNotsub, out=out14, cout=carry15);
    ALU1bit(a= a[15], b=b[15], cin=carry15, sub=sub, nor=norAndNotsub, out=out15, cout=carry16);
    Or16Way(a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, i=out8, j=out9, k=out10, l=out11, m=out12, n=out13, o=out14, p=out15, out=OrALUout);
    Not(in=OrALUout, out=z);
    Mux16(a[0]=out0, a[1]=out1, a[2]=out2, a[3]=out3, a[4]=out4, a[5]=out5, a[6]=out6, a[7]=out7, a[8]=out8, a[9]=out9, a[10]=out10, a[11]=out11, a[12]=out12, a[13]=out13, a[14]=out14, a[15]=out15, b[0]=out15, sel=norAndsub, out=out); 
}
